import numpy as np 
import seaborn as sns 
import matplotlib.pyplot as plt 
import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import Normalizer 
from collections import Counter 
from sklearn.metrics import accuracy_scorea 
from sklearn.neighbors import KNeighborsClassifier 
 from sklearn import datasets 
iris=datasets.load_iris() 
 Iris 
predictors = iris.data[:, 0:2] 
outcomes = iris.target 
 plt.plot(predictors[outcomes == 0][:, 0], predictors[outcomes == 0][:, 1], "ro") 
 
 plt.plot(predictors[outcomes == 1][:, 0], predictors[outcomes == 1][:, 1], "go") 
 
plt.plot(predictors[outcomes == 2][:, 0], predictors[outcomes == 2][:, 1], "bo") 

iris_df=pd.DataFrame(data=np.c_[iris['data'],iris['target']],columns= iris['feature_names'] + ['target']) 
iris_df.head() 
iris_df.describe() 
x= iris_df.iloc[:, :-1] 
y= iris_df.iloc[:, -1] 
x_train, x_test, y_train, y_test= train_test_split(x, y,test_size= 0.2,shuffle= True,random_state= 0) 
x_train= np.asarray(x_train) 
y_train= np.asarray(y_train) 
x_test= np.asarray(x_test) 
y_test= np.asarray(y_test) 
scaler= Normalizer().fit(x_train) # the scaler is fitted to the training set 
normalized_x_train= scaler.transform(x_train) # the scaler is applied to the training set 
normalized_x_test= scaler.transform(x_test) def distance_ecu(x_train, x_test_point): 
  distances= []  ## create empty list called distances 
  for row in range(len(x_train)):  
      current_train_point= x_train[row]  
      current_distance= 0  
      for col in range(len(current_train_point)): 
           
          current_distance += (current_train_point[col] - x_test_point[col]) **2 
          ## Or current_distance = current_distance + (x_train[i] - x_test_point[i])**2 
      current_distance= np.sqrt(current_distance) 
 
 
      distances.append(current_distance) 
  distances= pd.DataFrame(data=distances,columns=['dist']) 
  return distances 
 
 
def nearest_neighbors(distance_point, K): 
    df_nearest= distance_point.sort_values(by=['dist'], axis=0) 
    df_nearest= df_nearest[:K] 
    return df_nearest def voting(df_nearest, y_train): 
    counter_vote= Counter(y_train[df_nearest.index]) 
 
 
    y_pred= counter_vote.most_common()[0][0] 
 
 
    return y_pred  
def KNN(x_train, y_train, x_test, K): 
    y_pred=[] 
    for x_test_point in x_test: 
      distance_point  = distance_ecu(x_train, x_test_point)   
      df_nearest_point= nearest_neighbors(distance_point, K)   
      y_pred_point    = voting(df_nearest_point, y_train) 
      y_pred.append(y_pred_point) 
    return y_pred   
K=3 
y_pred_scratch= KNN(normalized_x_train, y_train, normalized_x_test, K) 
print(y_pred_scratch) 
knn=KNeighborsClassifier(K) 
knn.fit(normalized_x_train, y_train) 
y_pred_sklearn= knn.predict(normalized_x_test) 
print(y_pred_sklearn) 
print(f'The accuracy of our implementation is {accuracy score(y_test, y_pred_scratch)}') 
print(f'The accuracy of sklearn implementation is {accuracy_score(y_test, y_pred_sklearn)}') 
precision = precision_score(y_test, y_pred_scratch, labels=[1,2], average='micro') 
print('Precision: %.3f' % precision) 
recall = recall_score(y_test, y_pred_scratch, labels=[1,2], average='micro') 
print('Recall: %.3f' % recall) 
