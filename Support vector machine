import numpy as np 
import matplotlib.pyplot as plt 
from sklearn import svm, datasets 
import pandas as pd 
import seaborn as sns 
iris=datasets.load_iris() X = iris.data[:, :2] 
y = iris.target 
C = 1.0   

#Linear kernal 

x_train,x_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.25) 
svc = svm.SVC(kernel ='linear', C = 1).fit(X, y) classifier_predictions=svc.predict(x_test) 
print(accuracy_score(y_test,classifier_predictions)*100) 
print(precision_score(y_test,classifier_predictions, pos_label='positive' 
                                           ,average='micro')*100) 
print(recall_score(y_test,classifier_predictions, pos_label='positive' 
                                           ,average='micro')*100) x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1 
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 
h = (x_max / x_min)/100 
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), 
         np.arange(y_min, y_max, h)) 
plt.subplot(1, 1, 1) 
Z = svc.predict(np.c_[xx.ravel(), yy.ravel()]) 
Z = Z.reshape(xx.shape) 
plt.contourf(xx, yy, Z, cmap = plt.cm.Paired, alpha = 0.8) 
   
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Paired) 
plt.xlabel('Sepal length') 
plt.ylabel('Sepal width') 
plt.xlim(xx.min(), xx.max()) 
plt.title('SVC with linear kernel') 
plt.show() 
classifier_predictions=svc.predict(x_test) 
print(accuracy_score(y_test,classifier_predictions)*100) 
print(precision_score(y_test,classifier_predictions, pos_label='positive' 
                                           ,average='micro')*100) 
print(recall_score(y_test,classifier_predictions, pos_label='positive' 
                                           ,average='micro')*100) 
 
