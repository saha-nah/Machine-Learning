from sklearn.ensemble import AdaBoostClassifier 
from sklearn import datasets 
from sklearn.model_selection import train_test_split 
from sklearn import metrics 
 
iris = datasets.load_iris() 
X = iris.data 
y = iris.target 
 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) 
 
print(X_train.shape) 
print(X_test.shape) 
print(y_train.shape) 
print(y_test.shape) 
 
 
abc = AdaBoostClassifier(n_estimators=50,learning_rate=1) 
model = abc.fit(X_train, y_train) 
y_pred = model.predict(X_test) 
 
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))   
print("Precision:",metrics.precision_score(y_test, y_pred,pos_label='positive',average='micro')) 
print("Recall:",metrics.recall_score(y_test, y_pred,pos_label='positive',average='micro')) 
 
from sklearn.ensemble import AdaBoostClassifier 
from sklearn.svm import SVC 
from sklearn import metrics 
 
 
svc=SVC(probability=True, kernel='linear') 
abc =AdaBoostClassifier(n_estimators=50, base_estimator=svc,lear  ning_rate=1) 
model = abc.fit(X_train, y_train) 
 
y_pred = model.predict(X_test) 
print("Accuracy:",metrics.accuracy_score(y_test, y_pred)) 
print("Precision:",metrics.precision_score(y_test, y_pred,pos_label='positive',average='micro')) 
print("Recall:",metrics.recall_score(y_test, y_pred,pos_label='positive',average='micro')) 
